'''
Created on 21 03 2022

@author: ManuLahariya
'''

import math
import tensorflow as tf

def Calculate_NonLinearOP(Fan_powers, Weather_data_tf, T_basin):

    rel_hum_air_out = 100  # relative humidity of outgoing air at the cooling tower, in percentage
    fandiams = [6.2, 6.2]  # an array with the fan diameters-
    celldimensions = [11, 12]  # the cell dimensions [length in meters, width in meters]
    Trange = 8  # difference in temperature between hot water inlet and water exit (or Tbasin)
    Cw = 4.186  # [kJ/kg.K]
    rho_water = 997  # [kg/m³]
    m_bassin = 900  # total volume of water in the cooling system, in m³
    Qp = 33 * 1000

    rel_hum_air_in = Weather_data_tf[:, 2:3]
    P_atm = Weather_data_tf[:, 3:4] * 100
    T_air_in = Weather_data_tf[:, 1:2]

    T_air_out = T_basin + Trange

    rho_air = TF_calc_rho_air(T_air_in, rel_hum_air_in, P_atm)
    m_air = TF_airflow_tower(Fan_powers, fandiams, celldimensions, 1, 0.95, 0.55, rho_air)
    Qtower = (m_air * (TF_calc_enthalpy_moist_air(T_air_out, rel_hum_air_out, P_atm) -
                       TF_calc_enthalpy_moist_air(T_air_in, rel_hum_air_in, P_atm)))
    NonlinOP = (Qp - Qtower) / (Cw * m_bassin * rho_water) * 60   # sec to 1 minutes
    return NonlinOP


def TF_calc_rho_air(T_air, rel_hum, p_atm):
    comparison = tf.less(T_air, 0)
    sat_pres = tf.where(comparison,
                        0.61115 * tf.math.exp((23.036 - (T_air / 333.7)) * (T_air / (279.82 + T_air))) * 1000,
                        0.61121 * tf.math.exp((18.678 - (T_air / 234.5)) * (T_air / (257.14 + T_air))) * 1000)
    T_air = T_air + 273.15
    P1 = sat_pres
    Pv = (P1 * (rel_hum / 100))
    Pd = p_atm - Pv
    rho_air = (((Pd) / (287.058 * T_air)) + ((Pv) / (461.495 * T_air)))
    return rho_air


def TF_airflow_tower(fanpowers, fandiams, celldimensions, Kel, eta_motor, eta_fan, rho_air):
    """Calculate the airflow generated by all fans of a cooling tower combined in kg/s,
    based on the supplied power to the fan motors.
    Calculation is done on air of 15 degrees C.
    Kel: eliminator coefficient (if unknown, set to 1)
    eta_motor: electric power to shaft power efficiency of motor (if unknown, set to 0.95)
    eta_fan: shaft power to wind power efficiency of fan (if unknown, set to 0.55)
    rho_air: density of the air in kg/qubic meter
    """

    m_air_1 = (((2 * fanpowers[:,0:1] * 1000 * rho_air * (
                celldimensions[0] * celldimensions[1]) ** 2 * eta_fan * eta_motor) / (6.5 + Kel + 2 * (
                (celldimensions[0] * celldimensions[1]) / ((fandiams[0] / 2) ** 2 * math.pi)) ** 2)) ** (
                         1 / 3))
    m_air_2 = (((2 * fanpowers[:, 1:2] * 1000 * rho_air * (
            celldimensions[0] * celldimensions[1]) ** 2 * eta_fan * eta_motor) / (6.5 + Kel + 2 * (
            (celldimensions[0] * celldimensions[1]) / ((fandiams[1] / 2) ** 2 * math.pi)) ** 2)) ** (
                     1 / 3))
    totalair = m_air_1 + m_air_2  # the total amount of air, from all the fans, in kg/s
    return totalair


def TF_calc_enthalpy_moist_air(T_air, rel_hum, p_atm):
    comparison = tf.less(T_air, 0)
    sat_pres = tf.where(comparison,
                        0.61115 * tf.math.exp((23.036 - (T_air / 333.7)) * (T_air / (279.82 + T_air))) * 1000,
                        0.61121 * tf.math.exp((18.678 - (T_air / 234.5)) * (T_air / (257.14 + T_air))) * 1000)

    w = 0.622 * (((rel_hum / 100) * sat_pres) / (p_atm - ((rel_hum / 100) * sat_pres)))  # in kg_humidity/kg_dry_air

    comparison = tf.equal(T_air, 0)
    density = tf.where(comparison,
                        (p_atm - 0.387 * rel_hum / 100 * sat_pres) / (287 * (T_air + 0.0001)),
                        (p_atm - 0.387 * rel_hum / 100 * sat_pres) / (287 * T_air))

    # cpa = 1.005+(1.35*(10**(-8))*((T_air + 30)**2)) #in kJ/kg.K
    # cpv = 1.8684 + 0.0095*(T_air/100) + 0.00373*((T_air/100)**2) # in kJ/kg.K
    # cp = cpa + w*cpv # in kJ/kg_dry_air.K
    enthalpy = 1.006 * T_air + w * (2500 + 1.863 * T_air)  # in kJ/kg_dry_air
    return enthalpy